{"name":"Default workspace","clients":[{"id":"8195c12d-b8b4-40a2-bda7-53cfbc7c7326","name":"Bot 1","actions":[],"modelers":[],"objects":[]},{"id":"1814debe-7e46-4e23-bc2c-77be96f3eb37","name":"Bot 2","actions":[],"modelers":[],"objects":[]}],"actions":[],"modelers":[{"id":"e553f804-4fe2-4139-a865-6972a9123d8f","name":"Hej","rules":{"update":"// Define rules that describes if the packet creates or updates an object. \nfunction onSocketPacketReceived(socketIndex, packet) {\n    if (socketIndex !== 0) {\n        return false;\n    }\n    const { type, data } = JSON.parse(packet);\n    return type === \"user_data\";\n}\n","remove":"// Define rules that describes if the packet removes an object. \nfunction onSocketPacketReceived(socketIndex, packet) {\n    if (socketIndex !== 0) {\n        return false;\n    }\n    const { type, data } = JSON.parse(packet);\n    return type === \"user_removed\";\n}\n","map":"\n// Objects must always contain \"_id\" property\n\n// Describe how to get existing object. the variable \"objects\" is a Map with all objects\nfunction getExisting(packet) {\n    const { data } = JSON.parse(packet);\n    return objects[data.p.c.id];\n}\n\n// Define how the object will look like.\nfunction map(packet, existing) {\n    const { data } = JSON.parse(packet);\n    return {\n        _id: data.p.c.id,\n        name: data.p.c.n,\n        friends: [\n            ...data.p.fds\n        ],\n    };\n}\n"}},{"id":"f83e831a-d217-443b-8bfc-846d8ec0b679","name":"Hehe","rules":{"update":"// Define rules that describes if the packet creates or updates an object. \nfunction onSocketPacketReceived(socketIndex, packet) {\n    if (socketIndex !== 0) {\n        return false;\n    }\n    const { type, data } = JSON.parse(packet);\n    return type === \"user_data\";\n}\n","remove":"// Define rules that describes if the packet removes an object. \nfunction onSocketPacketReceived(socketIndex, packet) {\n    if (socketIndex !== 0) {\n        return false;\n    }\n    const { type, data } = JSON.parse(packet);\n    return type === \"user_removed\";\n}\n","map":"\n// Objects must always contain \"_id\" property\n\n// Describe how to get existing object. the variable \"objects\" is a Map with all objects\nfunction getExisting(packet) {\n    const { data } = JSON.parse(packet);\n    return objects[data.p.c.id];\n}\n\n// Define how the object will look like.\nfunction map(packet, existing) {\n    const { data } = JSON.parse(packet);\n    return {\n        _id: data.p.c.id,\n        name: data.p.c.n,\n        friends: [\n            ...data.p.fds\n        ],\n    };\n}\n"}},{"id":"c10d8c24-0a98-45a3-9c5a-e46409d7a346","name":"Bot 1zzz","rules":{"update":"// Define rules that describes if the packet creates or updates an object. \nfunction onSocketPacketReceived(socketIndex, packet) {\n    if (socketIndex !== 0) {\n        return false;\n    }\n    const { type, data } = JSON.parse(packet);\n    return type === \"user_data\";\n}\n","remove":"// Define rules that describes if the packet removes an object. \nfunction onSocketPacketReceived(socketIndex, packet) {\n    if (socketIndex !== 0) {\n        return false;\n    }\n    const { type, data } = JSON.parse(packet);\n    return type === \"user_removed\";\n}\n","map":"\n// Objects must always contain \"_id\" property\n\n// Describe how to get existing object. the variable \"objects\" is a Map with all objects\nfunction getExisting(packet) {\n    const { data } = JSON.parse(packet);\n    return objects[data.p.c.id];\n}\n\n// Define how the object will look like.\nfunction map(packet, existing) {\n    const { data } = JSON.parse(packet);\n    return {\n        _id: data.p.c.id,\n        name: data.p.c.n,\n        friends: [\n            ...data.p.fds\n        ],\n    };\n}\n"},"actions":[],"modelers":[],"objects":[]}]}