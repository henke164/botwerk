{"name":"Default workspace","clients":[{"id":"e37e284a-8dba-495c-8e2d-16f4a61163df","name":"Default","actions":[],"modelers":["e9db3c2e-a08b-463a-b6a6-8dd3255e0205"]},{"id":"5dd783db-a9c6-41a2-9542-d93faa889808","name":"Bot 2","actions":[],"modelers":[],"objects":[]}],"actions":[],"modelers":[{"id":"e9db3c2e-a08b-463a-b6a6-8dd3255e0205","name":"Test-Zone User","rules":{"update":"// Define rules that describes if the packet creates or updates an object. \nfunction onSocketPacketReceived(socketIndex, packet) {\n    if (socketIndex !== 0) {\n        return false;\n    }\n    const { type, data } = JSON.parse(packet);\n    return type === \"USER_DATA\";\n}\n","remove":"// Define rules that describes if the packet removes an object. \nfunction onSocketPacketReceived(socketIndex, packet) {\n    if (socketIndex !== 0) {\n        return false;\n    }\n    const { type, data } = JSON.parse(packet);\n    return type === \"USER_REMOVED\";\n}\n","map":"\n// Objects must always contain \"_id\" property\n\n// Describe how to get existing object. the variable \"objects\" is a Map with all objects\nfunction getExisting(packet) {\n    const { data } = JSON.parse(packet);\n    return objects[data.p.c.id];\n}\n\n// Define how the object will look like.\nfunction map(packet, existing) {\n    const { data } = JSON.parse(packet);\n    return {\n        _id: data.p.c.id,\n        name: data.p.c.n,\n        friends: [\n            ...data.p.fds\n        ],\n    };\n}\n"}}]}